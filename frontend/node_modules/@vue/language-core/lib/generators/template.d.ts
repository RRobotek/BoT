import * as CompilerDOM from '@vue/compiler-dom';
import type * as ts from 'typescript';
import type { CodeAndStack, Sfc, VueCompilerOptions } from '../types';
export declare function generate(ts: typeof import('typescript'), compilerOptions: ts.CompilerOptions, vueCompilerOptions: VueCompilerOptions, template: NonNullable<Sfc['template']>, shouldGenerateScopedClasses: boolean, stylesScopedClasses: Set<string>, hasScriptSetupSlots: boolean, slotsAssignName: string | undefined, propsAssignName: string | undefined, codegenStack: boolean): Generator<CodeAndStack, {
    tagOffsetsMap: Map<string, number[]>;
    accessedGlobalVariables: Set<string>;
    hasSlot: boolean;
}, unknown>;
export declare function createTsAst(ts: typeof import('typescript'), astHolder: any, text: string): ts.SourceFile;
export declare function isCompoundExpression(ts: typeof import('typescript'), ast: ts.SourceFile): boolean;
export declare function parseInterpolationNode(node: CompilerDOM.InterpolationNode, template: string): readonly [string, number];
export declare function parseVForNode(node: CompilerDOM.ForNode): {
    leftExpressionRange: {
        start: number;
        end: number;
    } | undefined;
    leftExpressionText: string | undefined;
};
export declare function forEachElementNode(node: CompilerDOM.RootNode | CompilerDOM.TemplateChildNode): Generator<CompilerDOM.ElementNode>;
