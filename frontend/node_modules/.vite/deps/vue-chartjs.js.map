{
  "version": 3,
  "sources": ["../../vue-chartjs/src/utils.ts", "../../vue-chartjs/src/BaseCharts.ts"],
  "sourcesContent": ["import type { ChartType, ChartDataset, DefaultDataPoint } from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function setChartOptions<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  options: TChartOptions<TType>\n): void {\n  chart.options = { ...options }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n\nexport const chartUpdateError = 'Update ERROR: chart instance not found'\n", "import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport type {\n  ChartType,\n  ChartComponentLike,\n  DefaultDataPoint,\n  ChartOptions,\n  Plugin\n} from 'chart.js'\n\nimport {\n  defineComponent,\n  ref,\n  shallowRef,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  isProxy,\n  toRaw,\n  PropType\n} from 'vue'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError,\n  chartUpdateError,\n  setChartOptions\n} from './utils'\n\nimport type {\n  TChartData,\n  TChartOptions,\n  TypedChartJS,\n  TypedChartComponent\n} from './types'\n\nexport const generateChart = <\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chartId: string,\n  chartType: TType,\n  chartController: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> =>\n  defineComponent({\n    props: {\n      chartData: {\n        type: Object as PropType<TChartData<TType, TData, TLabel>>,\n        required: true\n      },\n      chartOptions: {\n        type: Object as PropType<TChartOptions<TType>>,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object as PropType<Partial<CSSStyleDeclaration>>,\n        default: () => {}\n      },\n      plugins: {\n        type: Array as PropType<Plugin<TType>[]>,\n        default: () => []\n      }\n    },\n    setup(props, context) {\n      ChartJS.register(chartController)\n\n      const _chart = shallowRef<TypedChartJS<TType, TData, TLabel> | null>(null)\n      const canvasEl = ref<HTMLCanvasElement | null>(null)\n\n      function renderChart(\n        data: TChartData<TType, TData, TLabel>,\n        options: TChartOptions<TType>\n      ): void {\n        if (_chart.value !== null) {\n          chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n        }\n\n        if (canvasEl.value === null) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData<TType, TData, TLabel>(\n            data,\n            props.datasetIdKey\n          )\n          const canvasEl2DContext = canvasEl.value.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            _chart.value = new ChartJS<TType, TData, TLabel>(\n              canvasEl2DContext,\n              {\n                type: chartType,\n                data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n                options,\n                plugins: props.plugins\n              }\n            )\n          }\n        }\n      }\n\n      function chartDataHandler(\n        newValue: TChartData<TType, TData, TLabel>,\n        oldValue: TChartData<TType, TData, TLabel>\n      ): void {\n        const newData = isProxy(newValue) ? toRaw(newValue) : { ...newValue }\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : { ...oldValue }\n\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value)\n\n          const isEqualLabelsAndDatasetsLength = compareData<\n            TType,\n            TData,\n            TLabel\n          >(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets<TType, TData, TLabel>(\n              chart?.data,\n              newData,\n              props.datasetIdKey\n            )\n\n            if (newData.labels !== undefined) {\n              setChartLabels<TType, TData, TLabel>(\n                chart,\n                newData.labels,\n                context\n              )\n            }\n\n            updateChart()\n          } else {\n            if (chart !== null) {\n              chartDestroy<TType, TData, TLabel>(chart, context)\n            }\n\n            chartCreate<TType, TData, TLabel>(\n              renderChart,\n              props.chartData,\n              props.chartOptions as ChartOptions<TType>,\n              context\n            )\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n          }\n\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function chartOptionsHandler(options: TChartOptions<TType>): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          setChartOptions<TType, TData, TLabel>(chart, options)\n          updateChart()\n        } else {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function updateChart(): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          chartUpdate<TType, TData, TLabel>(chart, context)\n        } else {\n          console.error(chartUpdateError)\n        }\n      }\n\n      watch(\n        () => props.chartData,\n        (\n          newValue: TChartData<TType, TData, TLabel>,\n          oldValue: TChartData<TType, TData, TLabel>\n        ) => chartDataHandler(newValue, oldValue),\n        { deep: true }\n      )\n\n      watch(\n        () => props.chartOptions,\n        newValue => chartOptionsHandler(newValue as ChartOptions<TType>),\n        { deep: true }\n      )\n\n      onMounted(() => {\n        if (\n          'datasets' in props.chartData &&\n          props.chartData.datasets.length > 0\n        ) {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      })\n\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context)\n        }\n      })\n\n      context.expose({\n        chart: _chart,\n        updateChart\n      })\n\n      return () =>\n        h('div', { style: props.styles, class: props.cssClasses }, [\n          h('canvas', {\n            id: props.chartId,\n            width: props.width,\n            height: props.height,\n            ref: canvasEl\n          })\n        ])\n    }\n  }) as any\n\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Bubble,\n  Scatter\n}\n"],
  "mappings": "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",
  "names": ["ChartEmits", "ChartRendered", "ChartUpdated", "ChartDestroyed", "LabelsUpdated", "chartCreate", "createChartFunction", "chartData", "chartOptions", "context", "undefined", "emit", "chartUpdate", "chart", "update", "chartDestroy", "destroy", "getChartData", "data", "datasetIdKey", "nextData", "labels", "datasets", "setChartDatasets", "oldData", "newData", "addedDatasets", "map", "nextDataset", "currentDataset", "find", "dataset", "includes", "push", "Object", "assign", "setChartLabels", "setChartOptions", "options", "compareData", "newDatasetLabels", "label", "oldDatasetLabels", "length", "every", "value", "index", "templateError", "chartUpdateError", "generateChart", "chartId", "chartType", "chartController", "defineComponent", "props", "type", "required", "default", "String", "width", "Number", "height", "cssClasses", "styles", "plugins", "Array", "setup", "ChartJS", "register", "_chart", "shallowRef", "canvasEl", "ref", "renderChart", "toRaw", "Error", "canvasEl2DContext", "getContext", "isProxy", "Proxy", "chartDataHandler", "newValue", "oldValue", "keys", "isEqualLabelsAndDatasetsLength", "updateChart", "chartOptionsHandler", "console", "error", "watch", "deep", "onMounted", "onBeforeUnmount", "expose", "h", "style", "class", "id", "Bar", "BarController", "Doughnut", "DoughnutController", "Line", "LineController", "Pie", "PieController", "PolarArea", "PolarAreaController", "Radar", "RadarController", "Bubble", "BubbleController", "Scatter", "ScatterController"]
}
